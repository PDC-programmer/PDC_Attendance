from django.shortcuts import get_object_or_404, redirect
from django.contrib import messages
from django.http import JsonResponse
from django.utils.timezone import now
from django.contrib.auth.decorators import login_required
from .models import Approval
from attendance_app.models import LeaveAttendance, ShiftSchedule, EditTimeAttendance, LeaveBalance
from django.shortcuts import render
import json
from attendance_app.utils import calculate_working_hours  # Import the utility function
from django.core.paginator import Paginator
from django.db import transaction
from user_app.models import BsnBranch, User
from django.http import JsonResponse, HttpResponseForbidden, HttpResponse


@login_required(login_url='log-in')
def approve_request(request, approval_id, action):
    """
    ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡∏•‡∏≤ (LeaveAttendance) ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏∞ (ShiftSchedule)
    """
    user = request.user
    if not User.objects.filter(username=request.user, groups=3).exists():
        return HttpResponseForbidden("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ !")

    approval = get_object_or_404(Approval, id=approval_id)

    if action not in ["approved", "rejected"]:
        return JsonResponse({"error": "Invalid action"}, status=400)

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    approval.status = action
    approval.updated_at = now()
    approval.save()

    messages.success(request, f"‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠ {approval.get_approval_type_display()} {action} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    return redirect("approval_list")  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠


@login_required(login_url='log-in')
def approval_list(request):
    user = request.user
    if not User.objects.filter(username=request.user, groups=3).exists():
        return HttpResponseForbidden("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ !")
    search_query = request.GET.get("search", "").strip()
    approval_type_filter = request.GET.get("approval_type", "")
    status = request.GET.get("status", "")

    approvals = Approval.objects.filter(approve_user=request.user)

    if search_query:
        approvals = approvals.filter(
            request_user__first_name__icontains=search_query
        ) | approvals.filter(
            request_user__last_name__icontains=search_query
        ) | approvals.filter(
            request_user__username__icontains=search_query
        )

    if approval_type_filter:
        approvals = approvals.filter(approval_type=approval_type_filter)

    if status:
        approvals = approvals.filter(status=status)

    approvals = approvals.order_by("-created_at")  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤

    # ‚úÖ Pagination
    paginator = Paginator(approvals, 30)  # ‡πÅ‡∏™‡∏î‡∏á 30 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    return render(request, "approval_app/approval_list.html", {
        "approvals": page_obj,
        "search_query": search_query,
        "approval_type_filter": approval_type_filter,
        "status": status,
    })


@login_required(login_url='log-in')
def approval_list_request_user(request):
    search_query = request.GET.get("search", "").strip()
    approval_type_filter = request.GET.get("approval_type", "")
    status = request.GET.get("status", "")

    approvals = Approval.objects.filter(request_user=request.user)

    if search_query:
        approvals = approvals.filter(
            request_user__first_name__icontains=search_query
        ) | approvals.filter(
            request_user__last_name__icontains=search_query
        ) | approvals.filter(
            request_user__username__icontains=search_query
        )

    if approval_type_filter:
        approvals = approvals.filter(approval_type=approval_type_filter)

    if status:
        approvals = approvals.filter(status=status)

    approvals = approvals.order_by("-created_at")  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤

    # ‚úÖ Pagination
    paginator = Paginator(approvals, 30)  # ‡πÅ‡∏™‡∏î‡∏á 30 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    return render(request, "approval_app/approval_list_reqeust_user.html", {
        "approvals": page_obj,
        "search_query": search_query,
        "approval_type_filter": approval_type_filter,
        "status": status,
    })


@login_required(login_url="log-in")
def bulk_approve_requests(request):
    if request.method != "POST":
        return JsonResponse({"error": "Invalid request"}, status=400)

    data = json.loads(request.body)
    approval_ids = data.get("approval_ids", [])
    action = data.get("action")

    if action not in ["approved", "rejected"]:
        return JsonResponse({"error": "Invalid action"}, status=400)

    approvals = Approval.objects.select_related(
        "leave_attendance", "shift_schedule", "edit_time_attendance"
    ).filter(id__in=approval_ids, status="pending")

    current_time = now()

    approvals_to_update = []
    leave_attendance_to_update = []
    shift_schedule_to_update = []
    edit_time_to_update = []

    with transaction.atomic():
        for approval in approvals:
            approval.status = action
            approval.updated_at = current_time
            approvals_to_update.append(approval)

            # üõ†Ô∏è ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏° approval_type
            if approval.approval_type == "leave" and approval.leave_attendance:
                approval.leave_attendance.status = action
                approval.leave_attendance.updated_at = current_time
                leave_attendance_to_update.append(approval.leave_attendance)

            elif approval.approval_type == "shift" and approval.shift_schedule:
                if action == "approved":
                    ss = approval.shift_schedule
                    ss.shift = approval.shift
                    ss.shift_day = approval.shift_day
                    ss.approve_user = approval.approve_user
                approval.shift_schedule.status = action
                approval.shift_schedule.updated_at = current_time
                shift_schedule_to_update.append(approval.shift_schedule)

            elif approval.approval_type == "edit_time":
                # ‡∏´‡∏≤‡∏ï‡∏±‡∏ß edit attendance ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö approval ‡∏ô‡∏µ‡πâ
                edit_time = EditTimeAttendance.objects.filter(
                    date=approval.date,
                    status="pending",
                    approve_user=approval.approve_user,
                    user=approval.request_user,
                    branch=approval.branch,
                    timestamp=approval.timestamp,
                ).first()

                if edit_time:
                    edit_time.status = action
                    edit_time.updated_at = current_time
                    edit_time_to_update.append(edit_time)
                    approval.edit_time_attendance = edit_time

    # ‚úÖ ‡πÉ‡∏ä‡πâ bulk_update ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ save() ‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    Approval.objects.bulk_update(approvals_to_update, ["status", "updated_at", "edit_time_attendance"])

    # üöÄ ‡∏î‡∏∂‡∏á LeaveBalance ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    leave_balances = LeaveBalance.objects.filter(
        user__in=[leave.user for leave in leave_attendance_to_update],
        leave_type__in=[leave.leave_type for leave in leave_attendance_to_update]
    )

    # üó∫Ô∏è ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô dictionary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    balance_map = {
        (lb.user_id, lb.leave_type_id): lb
        for lb in leave_balances
    }

    leave_balances_to_update = []

    for leave in leave_attendance_to_update:
        key = (leave.user_id, leave.leave_type_id)
        leave_balance = balance_map.get(key)

        if not leave_balance:
            continue

        working_hours = calculate_working_hours(leave.user, leave.start_datetime, leave.end_datetime)

        if leave.status == "approved":
            if leave_balance.remaining_hours < working_hours:
                return JsonResponse({
                    "error": f"‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô {leave.user.get_full_name()} ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
                }, status=400)
            leave_balance.remaining_hours -= working_hours

        elif leave.status == "cancelled":
            leave_balance.remaining_hours += working_hours

        leave_balance.updated_at = current_time
        leave_balances_to_update.append(leave_balance)

    # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï LeaveBalance ‡πÅ‡∏ö‡∏ö bulk
    if leave_balances_to_update:
        LeaveBalance.objects.bulk_update(leave_balances_to_update, ["remaining_hours", "updated_at"])
    LeaveAttendance.objects.bulk_update(leave_attendance_to_update, ["status", "updated_at"])
    ShiftSchedule.objects.bulk_update(shift_schedule_to_update, ["shift", "shift_day", "approve_user", "status", "updated_at"])
    EditTimeAttendance.objects.bulk_update(edit_time_to_update, ["status", "updated_at"])

    return JsonResponse({"message": f"{len(approvals_to_update)} ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÅ‡∏•‡πâ‡∏ß"}, status=200)


@login_required(login_url="log-in")
def bulk_cancel_requests(request):
    if request.method != "POST":
        return JsonResponse({"error": "Invalid request"}, status=400)

    data = json.loads(request.body)
    approval_ids = data.get("approval_ids", [])

    # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á pending ‡∏≠‡∏¢‡∏π‡πà
    approvals = Approval.objects.select_related(
        "leave_attendance", "edit_time_attendance"
    ).filter(id__in=approval_ids, request_user=request.user, status="pending")

    if not approvals.exists():
        return JsonResponse({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ"}, status=400)

    current_time = now()

    approvals_to_update = []
    leave_attendance_to_update = []
    edit_time_to_update = []

    with transaction.atomic():
        for approval in approvals:
            approval.status = "cancelled"
            approval.updated_at = current_time
            approvals_to_update.append(approval)

            # ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ logic ‡∏à‡∏≤‡∏Å signal ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            if approval.approval_type == "leave" and approval.leave_attendance:
                lt = approval.leave_attendance
                lt.status = "cancelled"
                lt.updated_at = current_time
                leave_attendance_to_update.append(lt)

            elif approval.approval_type == "edit_time":
                edit_time = EditTimeAttendance.objects.filter(
                    date=approval.date,
                    status="pending",
                    approve_user=approval.approve_user,
                    user=approval.request_user,
                    branch=approval.branch,
                    timestamp=approval.timestamp,
                ).first()

                if edit_time:
                    edit_time.status = "cancelled"
                    edit_time.updated_at = current_time
                    edit_time_to_update.append(edit_time)
                    approval.edit_time_attendance = edit_time  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° ref ‡πÉ‡∏´‡πâ‡∏î‡πâ‡∏ß‡∏¢

    # ‚ö° ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö bulk
    Approval.objects.bulk_update(approvals_to_update, ["status", "updated_at", "edit_time_attendance"])
    LeaveAttendance.objects.bulk_update(leave_attendance_to_update, ["status", "updated_at"])
    EditTimeAttendance.objects.bulk_update(edit_time_to_update, ["status", "updated_at"])

    return JsonResponse({"message": f"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠ {len(approvals_to_update)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}, status=200)